/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* deleteDuplicates(struct ListNode* head){
    struct ListNode *dummy = malloc(sizeof(struct ListNode));
    dummy->next = head;
    dummy->val = 0;
    struct ListNode *prev = dummy , *curr = head;
    while(curr)
    {
        struct ListNode *next_node = curr->next;
        while(next_node && curr->val == next_node->val)
            next_node = next_node->next;
        if(curr->next != next_node)
            prev->next = next_node;
        else
            prev = curr;
        curr = next_node;
    }
    return dummy->next;
}



---------------------------------------------------------------------------------------


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 struct ListNode* deleteDuplicates(struct ListNode* head){
    // create a fake node that acts like a fake head of list pointing to the original head...
    struct ListNode* fake = (struct ListNode*)malloc(sizeof(struct ListNode));
    // fake node points to the original head...
    fake->next = head;
    struct ListNode* pre = fake;        //pointing to last node which has no duplicate...
    struct ListNode* curr = head;       // To traverse the linked list...
    // Now we traverse nodes and do the process...
    while (curr) {
        // Create a loop until the current and previous values are same, keep updating curr...
        while (curr->next && pre->next->val == curr->next->val)
            curr = curr->next;
        // if curr has non-duplicate value, move the pre pointer to next node...
        if (pre->next == curr)
            pre = pre->next;
        // If curr is updated to the last duplicate value, discard it & connect pre and curr->next...
        else
            pre->next = curr->next;
            // Move curr forward...
            // In next iteration, we still need to check whether curr points to duplicate value...
            curr = curr->next;
    }
    // Return the linked list...
    return fake->next;
}
